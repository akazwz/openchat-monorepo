syntax = "proto3";

package auth.v1;

service AuthService {
  // 用户注册
  rpc SignUp(SignUpRequest) returns (SignUpResponse);
  // 账号邮箱验证
  rpc VerifyAccount(VerifyAccountRequest) returns (VerifyAccountResponse);
  // 邮箱密码登录
  rpc SignInWithEmailPassword(SignInWithEmailPasswordRequest) returns (SignInWithEmailPasswordResponse);
  // 发送登录 OTP 邮件
  rpc SendSignInOtpEmail(SendSignInOtpEmailRequest) returns (SendSignInOtpEmailResponse);
  // 邮箱验证码登录
  rpc SignInWithEmailCode(SignInWithEmailCodeRequest) returns (SignInWithEmailCodeResponse);
  // 获取当前用户
  rpc WhoAmI(WhoAmIRequest) returns (WhoAmIResponse);
  // 刷新 token
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  // 获取登录二维码
  rpc GetLoginQrCode(GetLoginQrCodeRequest) returns (GetLoginQrCodeResponse);
  // 扫描二维码
  rpc ScanQrCode(ScanQrCodeRequest) returns (ScanQrCodeResponse);
  // 确认扫码登录
  rpc ConfirmQrCodeLogin(ConfirmQrCodeLoginRequest) returns (ConfirmQrCodeLoginResponse);
  // 检查扫码登录状态
  rpc CheckQrCodeLoginStatus(CheckQrCodeLoginStatusRequest) returns (CheckQrCodeLoginStatusResponse);
}

message SignUpRequest {
  string username = 1;
  string email = 2;
  string password = 3;
  optional string captcha = 4;
}

message SignUpResponse {}

message VerifyAccountRequest {
  string email = 1;
  string code = 2;
}

message User {
  string id = 1;
  string username = 2;
  string email = 3;
  string avatar = 4;
  string created_at = 5;
  string updated_at = 6;
}

message VerifyAccountResponse {
  User user = 1;
  string refresh_token = 2;
  string access_token = 3;
}

message SignInWithEmailPasswordRequest {
  string email = 1;
  string password = 2;
}

message SignInWithEmailPasswordResponse {
  User user = 1;
  string refresh_token = 2;
  string access_token = 3;
}

message SendSignInOtpEmailRequest {
  string email = 1;
  optional string captcha = 2;
}

message SendSignInOtpEmailResponse {}

message SignInWithEmailCodeRequest {
  string email = 1;
  string code = 2;
}

message SignInWithEmailCodeResponse {
  User user = 1;
  string refresh_token = 2;
  string access_token = 3;
}

message WhoAmIRequest {}

message WhoAmIResponse {
  User user = 1;
}

message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  User user = 1;
  string refresh_token = 2;
  string access_token = 3;
}

message GetLoginQrCodeRequest {}

message GetLoginQrCodeResponse {
  string qr_code_id = 1; // 二维码唯一标识
  string content = 2; // 二维码内容,前端可直接用于生成二维码
  int64 expires_in = 3; // 二维码有效期（秒）
}

message ScanQrCodeRequest {
  string qr_code_id = 1;
}

message ScanQrCodeResponse {}

message ConfirmQrCodeLoginRequest {
  string qr_code_id = 1;
}

message ConfirmQrCodeLoginResponse {}

message CheckQrCodeLoginStatusRequest {
  string qr_code_id = 1;
}

enum QrCodeLoginStatus {
  QR_CODE_LOGIN_STATUS_UNSPECIFIED = 0;
  QR_CODE_LOGIN_STATUS_PENDING = 1; // 等待扫码
  QR_CODE_LOGIN_STATUS_SCANNED = 2; // 已扫码
  QR_CODE_LOGIN_STATUS_CONFIRMED = 3; // 已确认登录
  QR_CODE_LOGIN_STATUS_EXPIRED = 4; // 已过期
  QR_CODE_LOGIN_STATUS_CANCELLED = 5; // 已取消
}

message CheckQrCodeLoginStatusResponse {
  QrCodeLoginStatus status = 1;
  optional User user = 2; // 登录成功后返回用户信息
  optional string refresh_token = 3; // 登录成功后返回刷新令牌
  optional string access_token = 4; // 登录成功后返回访问令牌
}
